-- PARA CRIAR UM BANCO DE DADOS
CREATE DATABASE ALURA;
CREATE TABLE ALUNO(
ID SERIAL PRIMARY KEY NOT NULL,
NOME VARCHAR (255)
);

-- PARA EXCLUIR UM BANCO DE DADOS
DROP DATABASE ALUNO;

-- PARA INSERIR DADOS NA TABELA
INSERT INTO ALUNO (NOME) VALUES ('MARIA HOLANDA');
INSERT INTO ALUNO (NOME) VALUES ('PEDRO AUGUSTO');
INSERT INTO ALUNO (NOME) VALUES ('RICARDO NUNES');
INSERT INTO ALUNO (NOME) VALUES ('LAURA OLIVEIRA');
INSERT INTO ALUNO (NOME) VALUES ('BENTO CARVALHO');
INSERT INTO ALUNO (NOME) VALUES ('RODRIGO ALVES');

-- PARA VERIFICAR OS DADOS DENTRO DA TABELA
SELECT * FROM ALUNO;

CREATE TABLE CURSOS (
ID INTEGER PRIMARY KEY NOT NULL,
DESCRICAO VARCHAR(255)
);

INSERT INTO CURSOS (ID, DESCRICAO) VALUES (1,'HTML');
INSERT INTO CURSOS (ID, DESCRICAO) VALUES (2,'CSS');
INSERT INTO CURSOS (ID, DESCRICAO) VALUES (3,'JAVASCRIPT');
INSERT INTO CURSOS (ID, DESCRICAO) VALUES (4,'PYTHON');
INSERT INTO CURSOS (ID, DESCRICAO) VALUES (5,'PHP');
INSERT INTO CURSOS (ID, DESCRICAO) VALUES (6,'UX/UI');

SELECT * FROM CURSOS;

-- LIBERANDO PARA DELETE E UPDATE AS FOREIGN KEY - OBS.: NA CHAVE QUE FICAR A PERMISSÃO, SOMENTE NELA PODERÁ EXECUTAR A AÇÃO DE UPDATE OU DELETE
CREATE TABLE ALUNO_CURSOS(
	ALUNO_ID INTEGER,
	CURSO_ID INTEGER,
		PRIMARY KEY(ALUNO_ID, CURSO_ID),
		FOREIGN KEY (ALUNO_ID)
		 REFERENCES ALUNO(ID)
		 ON DELETE CASCADE
		 ON UPDATE CASCADE,
	   FOREIGN KEY (CURSO_ID)
		REFERENCES CURSOS(ID)
);

INSERT INTO ALUNO_CURSOS (ALUNO_ID, CURSO_ID) VALUES (1,1);
INSERT INTO ALUNO_CURSOS (ALUNO_ID, CURSO_ID) VALUES (1,2);
INSERT INTO ALUNO_CURSOS (ALUNO_ID, CURSO_ID) VALUES (2,3);
INSERT INTO ALUNO_CURSOS (ALUNO_ID, CURSO_ID) VALUES (3,2);

SELECT * FROM ALUNO_CURSOS;

-- JOIN TRAZ O RESULTADO TODOS PARA TODOS,CASO TENHAM MAIS ALUNOS OU CURSOS QUE NÃO ESTÃO ATRELADOS, ELE NÃO TRAZ.
SELECT ALUNO.ID, ALUNO.NOME, CURSOS.ID, CURSOS.DESCRICAO
	FROM ALUNO
	JOIN ALUNO_CURSOS ON ALUNO_CURSOS.ALUNO_ID = ALUNO.ID
	JOIN CURSOS ON ALUNO_CURSOS.CURSO_ID = CURSOS.ID
	ORDER BY ALUNO.NOME

-- LEFT JOIN: TRAZ TODOS OS DADOS E CAMPOS DA TABELA, RESPEITANDO A ORDEM ESQUERDA PARA DIREITA. SE TIVER ALUNOS SEM CURSOS, ESSE COMANDO TRARÁ NA RELAÇÃO.
SELECT ALUNO.ID, ALUNO.NOME, CURSOS.ID, CURSOS.DESCRICAO 
	FROM ALUNO
	LEFT JOIN ALUNO_CURSOS ON ALUNO_CURSOS.ALUNO_ID = ALUNO.ID
	LEFT JOIN CURSOS	   ON ALUNO_CURSOS.CURSO_ID = CURSOS.ID

-- RIGHT JOIN: TRAZ TODOS OS DADOS E CAMPOS DA TABELA, RESPEITANDO A ORDEM DIREITA PARA ESQUERDA. SE TIVER ALUNOS SEM CURSOS, ESSE COMANDO TRARÁ NA RELAÇÃO.

SELECT ALUNO.ID, ALUNO.NOME, CURSOS.ID, CURSOS.DESCRICAO
	FROM ALUNO
	RIGHT JOIN ALUNO_CURSOS ON ALUNO_CURSOS.ALUNO_ID = ALUNO.ID
	RIGHT JOIN CURSOS	    ON ALUNO_CURSOS.CURSO_ID = CURSOS.ID

-- CROSS JOIN: TRAZ TODOS OS DADOS, E CASO ALGUM ESTEJA NULO, ELE PREENCHE COM OS DADOS EXISTENTES.

SELECT ALUNO.ID, ALUNO.NOME, CURSOS.ID, CURSOS.DESCRICAO
	FROM ALUNO
	CROSS JOIN CURSOS;


-- HAVING: O FILTRO (WHERE) DE AGRUPAMENTOS. COMO EXEMPLO: COUNT, AVG, MIN, MAX, SUM

SELECT CURSOS.DESCRICAO, 
		COUNT(ALUNO.ID)
	FROM CURSOS
	LEFT JOIN ALUNO_CURSOS ON ALUNO_CURSOS.CURSO_ID = CURSOS.ID
	LEFT JOIN ALUNO ON ALUNO.ID = ALUNO_CURSOS.ALUNO_ID
GROUP BY 1
	HAVING COUNT(ALUNO.ID) < 2


